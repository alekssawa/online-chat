datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model users {
  id          String         @id @default(uuid())
  email       String         @unique
  name        String         @default("unknown")
  nickname    String?         @unique        // ✅ Уникальный ник
  password    String
  about       String?                         // ✅ Информация о себе
  birthDate   DateTime?                       // ✅ Дата рождения
  lastOnline  DateTime?                       // ✅ Для отображения "времени захода"
  rooms       room_users[]
  messages    messages[]      @relation("SentMessages")
  tokens      RefreshToken[]
  avatar      user_avatars?
  friends     friends[]       @relation("UserFriends")
  privacy     privacy_settings?

  // обратная сторона дружбы (чтобы видеть, кто добавил тебя)
  friendOf    friends[]       @relation("FriendOf")
}

model friends {
  id         String   @id @default(uuid())
  userId     String
  friendId   String
  createdAt  DateTime @default(now())

  user       users    @relation("UserFriends", fields: [userId], references: [id])
  friend     users    @relation("FriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])  // нельзя добавить одного и того же друга дважды
}

model privacy_settings {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  showLastOnline       PrivacyLevel @default(ALL)
  showAbout            PrivacyLevel @default(ALL)
  showEmail            PrivacyLevel @default(FRIENDS)
  showBirthDate PrivacyLevel @default(FRIENDS)
  allowCalls           PrivacyLevel @default(FRIENDS)
}

enum PrivacyLevel {
  ALL       // видно всем
  FRIENDS   // видно только друзьям
  NONE      // видно никому
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      users     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model rooms {
  id        String        @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  users     room_users[]
  messages  messages[]
  avatar     room_avatars?
}

model room_users {
  id       String      @id @default(uuid())
  room     rooms     @relation(fields: [roomId], references: [id])
  roomId   String
  user     users     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())

  @@unique([roomId, userId])
}

model messages {
  id        String      @id @default(uuid())
  room      rooms     @relation(fields: [roomId], references: [id])
  roomId    String
  sender    users     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  text      String
  sentAt    DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model user_avatars {
  id          String      @id @default(uuid())
  user_id     String   @unique
  filename    String
  mime_type   String
  data        Bytes
  uploaded_at DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model room_avatars {
  id          String      @id @default(uuid())
  room_id     String   @unique
  filename    String
  mime_type   String
  data        Bytes
  uploaded_at DateTime @default(now())

  room rooms @relation(fields: [room_id], references: [id], onDelete: Cascade)
}