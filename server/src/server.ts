import express from "express";
import type { Response } from "express";
import { createServer } from "http";
import { Server } from "socket.io";
import { ApolloServer } from "@apollo/server";
import { expressMiddleware } from "@as-integrations/express4"; // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ express4
import cors from "cors";
import cookieParser from "cookie-parser";
import prisma from "./lib/prismaClient.js";
import { typeDefs } from "./graphql/schema.js";
import { resolvers } from "./graphql/resolvers.js";

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:5173",
    credentials: true,
  },
});

const apolloServer = new ApolloServer({ typeDefs, resolvers });
await apolloServer.start();

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–º–µ–Ω–∞–º–∏)
app.use(
  cors({
    origin: "http://localhost:5173", // —è–≤–Ω–æ —Ñ—Ä–æ–Ω—Ç
    credentials: true, // —Ä–∞–∑—Ä–µ—à–∞–µ–º cookie
  })
);

// –ï—Å–ª–∏ –Ω—É–∂–Ω—ã JSON-–∑–∞–ø—Ä–æ—Å—ã
app.use(express.json());
app.use(cookieParser());

// GraphQL
app.use(
  "/graphql",
  expressMiddleware(apolloServer, {
    context: async ({ req, res }) => {
      const { operationName } = req.body;
      const publicOperations = ["Register", "Login", "IntrospectionQuery"];

      // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–∞—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (publicOperations.includes(operationName)) {
        return { prisma, req, res, user: null };
      }

      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ‚Äî —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —É–∂–µ **–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑–æ–ª–≤–µ—Ä–∞—Ö**
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º req/res –∏ prisma, –±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ middleware
      return { prisma, req, res, user: null };
    },
  })
);

io.on("connection", (socket) => {
  console.log(`üîå New client connected: ${socket.id}`);

  socket.on("joinRoom", (roomId) => {
    console.log(`‚û°Ô∏è Client ${socket.id} joining room ${roomId}`);
    socket.join(roomId);
    console.log(`‚úÖ Client ${socket.id} joined rooms: ${Array.from(socket.rooms).join(", ")}`);
  });

  socket.on("leaveRoom", (roomId) => {
    console.log(`‚¨ÖÔ∏è Client ${socket.id} leaving room ${roomId}`);
    socket.leave(roomId);
    console.log(`‚úÖ Client ${socket.id} remaining rooms: ${Array.from(socket.rooms).join(", ")}`);
  });

  socket.on("sendMessage", (message) => {
    console.log(`‚úâÔ∏è New message from ${socket.id} in room ${message.roomId}: ${message.text}`);
    io.to(message.roomId).emit("newMessage", message);
    console.log(`üì§ Message emitted to room ${message.roomId}`);
  });

  socket.on("disconnect", (reason) => {
    console.log(`‚ùå Client disconnected: ${socket.id}, reason: ${reason}`);
  });
});

const PORT = 3000;
httpServer.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
  console.log(`GraphQL endpoint at http://localhost:${PORT}/graphql`);
});

// TODO: Argon2id –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
