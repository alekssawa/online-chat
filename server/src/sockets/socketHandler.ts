import { Server } from "socket.io";
import prisma from "../lib/prismaClient.js";
import { v4 as uuidv4 } from "uuid";

import type { User, Message } from "../../src/graphql/types.js";

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–æ–≤
const onlineUsers = new Map<string, boolean>();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤–æ–Ω–∫–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
const callRooms = new Map<string, Set<string>>();

export function registerSocketHandlers(io: Server) {
  io.on("connection", (socket) => {
    const userId = socket.handshake.auth.userId;
    if (!userId) return;

    console.log(`‚úÖ Socket connected: ${socket.id}, userId=${userId}`);

    // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω
    onlineUsers.set(userId, true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É —Å–æ–∫–µ—Ç—É –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω
    const currentOnline = Array.from(onlineUsers.entries()).map(
      ([id, online]) => ({
        userId: id,
        online,
      })
    );
    socket.emit("onlineUsersList", currentOnline);

    // –°–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
    socket.broadcast.emit("userStatusChanged", { userId, online: true });

    // ==========================
    // üìû –õ–û–ì–ò–ö–ê WEBRTC –ó–í–û–ù–ö–û–í
    // ==========================
    socket.on("join-call", (callId: string) => {
      if (!callId) return;

      // Leave previous call rooms
      socket.rooms.forEach((room) => {
        if (room !== socket.id && room.startsWith("call-")) {
          socket.leave(room);
        }
      });

      const callRoomId = `call-${callId}`;
      socket.join(callRoomId);

      if (!callRooms.has(callRoomId)) {
        callRooms.set(callRoomId, new Set());
      }

      const room = callRooms.get(callRoomId);
      const otherUsers = Array.from(room || []);

      // Add current user to room
      room?.add(socket.id);

      // Send existing users to new user
      socket.emit("users-in-call", otherUsers);

      // Notify other users about new user
      otherUsers.forEach((userSocketId) => {
        socket.to(userSocketId).emit("user-joined-call", socket.id);
      });

      console.log(`üéß Call room ${callRoomId} users:`, Array.from(room || []));
    });

    socket.on("webrtc-signal", (data: { to: string; signal: any }) => {
      socket.to(data.to).emit("webrtc-signal", {
        from: socket.id,
        signal: data.signal,
      });
    });

    // ==========================
    // –ì–†–£–ü–ü–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
    // ==========================
    socket.on("joinGroup", (groupId: string) => {
      if (!groupId) return;
      socket.join(`group-${groupId}`);
      console.log(`üë• User ${userId} joined group ${groupId}`);
    });

    socket.on("leaveGroup", (groupId: string) => {
      if (!groupId) return;
      socket.leave(`group-${groupId}`);
      console.log(`üö™ User ${userId} left group ${groupId}`);
    });

    socket.on(
      "sendGroupMessage",
      async (data: { groupId: string; senderId: string; text: string }) => {
        if (!data.groupId || !data.senderId || !data.text) return;
        try {
          const savedMessage = await prisma.messages.create({
            data: {
              id: uuidv4(),
              text: data.text,
              senderId: data.senderId,
              groupId: data.groupId, // –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –≥—Ä—É–ø–ø–µ
            },
            include: { sender: true },
          });

          const sender = {
            ...savedMessage.sender,
            birthDate: savedMessage.sender.birthDate
              ? savedMessage.sender.birthDate.toISOString()
              : null,
            lastOnline: savedMessage.sender.lastOnline
              ? savedMessage.sender.lastOnline.toISOString()
              : null,
          };

          const message: Message = {
            id: savedMessage.id,
            text: savedMessage.text,
            senderId: savedMessage.senderId,
            groupId: savedMessage.groupId,
            privateChatId: null,
            sentAt: savedMessage.sentAt.toISOString(),
            updatedAt: savedMessage.updatedAt.toISOString(),
            sender,
          };

          io.to(`group-${data.groupId}`).emit("newGroupMessage", message);
        } catch (err) {
          console.error(err);
          socket.emit("errorMessage", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
          });
        }
      }
    );

    // ==========================
    // –ü–†–ò–í–ê–¢–ù–´–ï –ß–ê–¢–´
    // ==========================
    socket.on("joinPrivateChat", (chatId: string) => {
      if (!chatId) return;
      socket.join(`chat-${chatId}`);
      console.log(`üë• User ${userId} joined private chat ${chatId}`);
    });

    socket.on("leavePrivateChat", (chatId: string) => {
      if (!chatId) return;
      socket.leave(`chat-${chatId}`);
      console.log(`üö™ User ${userId} left private chat ${chatId}`);
    });

    socket.on(
      "sendPrivateMessage",
      async (data: { chatId: string; senderId: string; text: string }) => {
        if (!data.chatId || !data.senderId || !data.text) return;
        try {
          const savedMessage = await prisma.messages.create({
            data: {
              id: uuidv4(),
              text: data.text,
              senderId: data.senderId,
              privateChatId: data.chatId, // –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—É
            },
            include: { sender: true },
          });

          const sender = {
            ...savedMessage.sender,
            birthDate: savedMessage.sender.birthDate
              ? savedMessage.sender.birthDate.toISOString()
              : null,
            lastOnline: savedMessage.sender.lastOnline
              ? savedMessage.sender.lastOnline.toISOString()
              : null,
          };

          const message: Message = {
            id: savedMessage.id,
            text: savedMessage.text,
            senderId: savedMessage.senderId,
            groupId: null,
            privateChatId: savedMessage.privateChatId,
            sentAt: savedMessage.sentAt.toISOString(),
            updatedAt: savedMessage.updatedAt.toISOString(),
            sender,
          };

          io.to(`chat-${data.chatId}`).emit("newPrivateMessage", message);
        } catch (err) {
          console.error(err);
          socket.emit("errorMessage", {
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
          });
        }
      }
    );

    // ==========================
    // DISCONNECT
    // ==========================
    socket.on("disconnect", async () => {
      console.log(`‚ùå Socket disconnected: ${socket.id}, userId=${userId}`);

      onlineUsers.set(userId, false);
      io.emit("userStatusChanged", { userId, online: false });

      try {
        await prisma.users.update({
          where: { id: userId },
          data: { lastOnline: new Date() },
        });
      } catch (err) {
        console.error(`‚ö†Ô∏è Failed to update lastOnline for ${userId}:`, err);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–≤–æ–Ω–∫–æ–≤
      callRooms.forEach((users, roomId) => {
        if (users.has(socket.id)) {
          users.delete(socket.id);
          socket.to(roomId).emit("user-left-call", socket.id);
          if (users.size === 0) callRooms.delete(roomId);
        }
      });
    });
  });
}
