generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model messages {
  id        Int       @id @default(autoincrement())
  room_id   Int
  sender_id Int
  text      String
  sent_at   DateTime? @default(now()) @db.Timestamp(6)
  rooms     rooms     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model room_users {
  id        Int       @id @default(autoincrement())
  room_id   Int
  user_id   Int
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  rooms     rooms     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([room_id, user_id])
}

model rooms {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  messages   messages[]
  room_users room_users[]
  avatar     room_avatars?
}

model users {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String
  messages   messages[]
  room_users room_users[]
  avatar     user_avatars?
}

model user_avatars {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  filename   String
  mime_type  String
  data       Bytes
  uploaded_at DateTime? @default(now()) @db.Timestamp(6)

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model room_avatars {
  id         Int       @id @default(autoincrement())
  room_id    Int       @unique
  filename   String
  mime_type  String
  data       Bytes
  uploaded_at DateTime? @default(now()) @db.Timestamp(6)

  room rooms @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}